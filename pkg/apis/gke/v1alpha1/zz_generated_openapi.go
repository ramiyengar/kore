// +build !ignore_autogenerated

/**
 * Copyright (C) 2020 Appvia Ltd <info@appvia.io>
 *
 * This file is part of kore-apiserver.
 *
 * kore-apiserver is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * kore-apiserver is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with kore-apiserver.  If not, see <http://www.gnu.org/licenses/>.
 */
// Code generated by openapi-gen. DO NOT EDIT.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKE":                  schema_pkg_apis_gke_v1alpha1_GKE(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentials":       schema_pkg_apis_gke_v1alpha1_GKECredentials(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsSpec":   schema_pkg_apis_gke_v1alpha1_GKECredentialsSpec(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsStatus": schema_pkg_apis_gke_v1alpha1_GKECredentialsStatus(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKESpec":              schema_pkg_apis_gke_v1alpha1_GKESpec(ref),
		"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKEStatus":            schema_pkg_apis_gke_v1alpha1_GKEStatus(ref),
	}
}

func schema_pkg_apis_gke_v1alpha1_GKE(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKE is the Schema for the gkes API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKESpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKEStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKESpec", "github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKEStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKECredentials(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKECredentials is the Schema for the gkecredentials API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsSpec", "github.com/appvia/kore/pkg/apis/gke/v1alpha1.GKECredentialsStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKECredentialsSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKECredentialsSpec defines the desired state of GKECredentials",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"account": {
						SchemaProps: spec.SchemaProps{
							Description: "Account is the credentials used to speak the GCP APIs; you create a service account under the Cloud IAM within the project, adding the permissions 'Compute Admin' role to the service account via IAM tab. Once done you can create a key under 'Service Accounts' and copy and paste the JSON payload here.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"project": {
						SchemaProps: spec.SchemaProps{
							Description: "Project is the GCP project these credentias pretain to",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"region": {
						SchemaProps: spec.SchemaProps{
							Description: "Region is the GCP region you wish to the cluster to reside within",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"account", "project", "region"},
			},
		},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKECredentialsStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKECredentialsStatus defines the observed state of GKECredentials",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is a collection of potential issues",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Condition"),
									},
								},
							},
						},
					},
					"verified": {
						SchemaProps: spec.SchemaProps{
							Description: "Verified checks that the credentials are ok and valid",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Condition"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKESpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKESpec defines the desired state of GKE",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"description": {
						SchemaProps: spec.SchemaProps{
							Description: "Description provides a short summary / description of the cluster.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the initial kubernetes version which the cluster should be configured with.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "Size is the number of nodes per zone which should exist in the cluster.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"maxSize": {
						SchemaProps: spec.SchemaProps{
							Description: "MaxSize assuming the autoscaler is enabled this is the maximum number nodes permitted",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"diskSize": {
						SchemaProps: spec.SchemaProps{
							Description: "DiskSize is the size of the disk used by the compute nodes.",
							Type:        []string{"integer"},
							Format:      "int64",
						},
					},
					"imageType": {
						SchemaProps: spec.SchemaProps{
							Description: "ImageType is the operating image to use for the default compute pool.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"machineType": {
						SchemaProps: spec.SchemaProps{
							Description: "MachineType is the machine type which the default nodes pool should use.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"authorizedMasterNetworks": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-list-type": "",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "AuthorizedMasterNetworks is a collection of authorized networks which is permitted to speak to the kubernetes API, default to all if not provided.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/gke/v1alpha1.AuthorizedNetwork"),
									},
								},
							},
						},
					},
					"network": {
						SchemaProps: spec.SchemaProps{
							Description: "Network is the GCP network the cluster reside on, which have to be unique within the GCP project and created beforehand.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"subnetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "Subnetwork is name of the GCP subnetwork which the cluster nodes should reside",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"servicesIPV4Cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "ServicesIPV4Cidr is an optional network cidr configured for the cluster services",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"clusterIPV4Cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "ClusterIPV4Cidr is an optional network CIDR which is used to place the pod network on",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"enableAutorepair": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableAutorepair indicates if the cluster should be configured with auto repair is enabled",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableAutoscaler": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableAutoscaler indicates if the cluster should be configured with cluster autoscaling turned on",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableAutoUpgrade": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableAutoUpgrade indicates if the cluster should be configured with autograding enabled; meaning both nodes are masters are autoscated scheduled to upgrade during your maintenance window.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableHorizontalPodAutoscaler": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableHorizontalPodAutoscaler indicates if the cluster is configured with the horizontal pod autoscaler addon. This automatically adjusts the cpu and memory resources of pods in accordances with their demand. You should ensure you use PodDisruptionBudgets if this is enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableHTTPLoadBalancer": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableHTTPLoadBalancer indicates if the cluster should be configured with the GKE ingress controller. When enabled GKE will autodiscover your ingress resources and provision load balancer on your behalf.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableIstio": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableIstio indicates if the GKE Istio service mesh is deployed to the cluster; this provides a more feature rich routing and instrumentation.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableStackDriverLogging": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableStackDriverLogging indicates if Stackdriver logging should be enabled for the cluster",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableStackDriverMetrics": {
						SchemaProps: spec.SchemaProps{
							Description: "EnableStackDriverMetrics indicates if Stackdriver metrics should be enabled for the cluster",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enablePrivateNetwork": {
						SchemaProps: spec.SchemaProps{
							Description: "EnablePrivateNetwork indicates if compute nodes should have external ip addresses or use private networking and a cloud-nat device.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"masterIPV4Cidr": {
						SchemaProps: spec.SchemaProps{
							Description: "MasterIPV4Cidr is network range used when private networking is enabled. This is the peering subnet used to to GKE master api layer. Note, this must be unique within the network.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"maintenanceWindow": {
						SchemaProps: spec.SchemaProps{
							Description: "MaintenanceWindow is the maintenance window provided for GKE to perform upgrades if enabled.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"tags": {
						SchemaProps: spec.SchemaProps{
							Description: "Tags is a collection of tags related to the cluster type",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"description", "version", "size", "maxSize", "diskSize", "imageType", "machineType", "authorizedMasterNetworks", "network", "subnetwork", "servicesIPV4Cidr", "clusterIPV4Cidr", "enableAutorepair", "enableAutoscaler", "enableAutoUpgrade", "enableHorizontalPodAutoscaler", "enableHTTPLoadBalancer", "enableIstio", "enableStackDriverLogging", "enableStackDriverMetrics", "enablePrivateNetwork", "masterIPV4Cidr", "maintenanceWindow"},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/gke/v1alpha1.AuthorizedNetwork"},
	}
}

func schema_pkg_apis_gke_v1alpha1_GKEStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "GKEStatus defines the observed state of GKE",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"conditions": {
						SchemaProps: spec.SchemaProps{
							Description: "Conditions is the status of the components",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/appvia/kore/pkg/apis/core/v1.Component"),
									},
								},
							},
						},
					},
					"caCertificate": {
						SchemaProps: spec.SchemaProps{
							Description: "CACertificate is the certificate for this cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"endpoint": {
						SchemaProps: spec.SchemaProps{
							Description: "Endpoint is the endpoint of the cluster",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "Status provides a overall status",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/appvia/kore/pkg/apis/core/v1.Component"},
	}
}
